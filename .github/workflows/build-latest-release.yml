name: Build and Release

permissions:
  contents: write

on:
  pull_request:
    types:
      - closed
  workflow_dispatch: # Allows manual triggering

jobs:
  get_target_tag:
    name: Get target tag
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Get current version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml)
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Get the newest version tag from the repository
        id: get_version_tag
        run: |
          git fetch --tags
          TAG=$(git tag | grep -E '^v?[0-9]+(\.[0-9]+)*$' | sort -V | tail -n 1)
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Determine target tag
        id: target_tag
        run: |
          if [[ "${{ env.VERSION }}" == "${{ env.TAG }}" ]]; then
            echo "TARGET_TAG=latest" >> $GITHUB_ENV
          else
            echo "TARGET_TAG=${{ env.VERSION }}" >> $GITHUB_ENV
          fi

  build:
    name: Build on ${{ matrix.os }}
    if: github.event.pull_request.merged
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-

      - name: Build release
        run: cargo build --release

      - name: Determine artifact name
        id: artifact-name
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv target/release/rustcast target/release/rustcast-${{ matrix.os }}.exe
            echo "ARTIFACT_NAME=rustcast-${{ matrix.os }}.exe" >> $GITHUB_ENV
          else
            mv target/release/rustcast target/release/rustcast-${{ matrix.os }}
            echo "ARTIFACT_NAME=rustcast-${{ matrix.os }}" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            target/release/rustcast-${{ matrix.os }}
            target/release/rustcast-${{ matrix.os }}.exe
          if-no-files-found: ignore

  build_docker:
    name: Build Docker image
    needs: build
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: alex222222222222/rcast:${{ env.TARGET_TAG }}

  create_release:
    name: Create GitHub Release
    needs: build
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(git log -5 --pretty=format:"* %s (%h)" --abbrev-commit)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Delete existing release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true
          tag_name: ${{ env.TARGET_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true # Continue even if no previous release exists

      - name: Create new 'latest' release
        if: ${{ env.TARGET_TAG == 'latest' }}
        id: create_release_latest
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Build
          body: |
            Latest build for commit ${{ github.sha }}

            ## Recent changes:
            ${{ env.CHANGELOG }}

            *This is an automated prerelease build from a merged PR to the master branch.*
          files: artifacts/**
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new release
        if: ${{ env.TARGET_TAG != 'latest' }}
        id: create_release_version
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TARGET_TAG }}
          name: ${{ env.TARGET_TAG }} Release
          body: |
            Release ${{ env.TARGET_TAG }}

            ## Recent changes:
            ${{ env.CHANGELOG }}

            *This is an automated release from a merged PR to the master branch.*
          files: artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
